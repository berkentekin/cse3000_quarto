---
title: "cse3000_quatro"
---

## Quarto

Install packages first

```{r}
if (!require("tidyverse")) {
  install.packages("tidyverse")
}

if (!require("stringdist")) {
  install.packages("stringdist")
}

if (!require("ggpmisc")) {
  install.packages("ggpmisc")
}


```

Helpful variables

```{r}
  snr_order <- c("n4", "n2", "0", "2", "4", "6", "8", "Q")

```

I first merge all data that I have, and create one DataFrame

```{r}
prep <- function(metadata_csv_loc, ...) {
  scores = list(...)
  stoi_scores_loc <- scores[["stoi_scores_loc"]]
  miknn_scores_loc <- scores[["miknn_scores_loc"]]
  siib_scores_loc <- scores[["siib_scores_loc"]]
  siib_scores_gaussian_loc <- scores[["siib_scores_gaussian_loc"]]
  siib_scores_gaussian_gapped_loc <- scores[["siib_scores_gaussian_gapped_loc"]]
  
  l1_data<- metadata_csv_loc |> read.csv(sep = ";") |> as_tibble()
  l1_stoi_scores <- stoi_scores_loc |> read.csv(sep=",") |> as_tibble()
  l1_miknn_scores <- miknn_scores_loc |> read.csv(sep=",") |> as_tibble()
  l1_siib_scores <- siib_scores_loc |> read.csv(sep=",") |> as_tibble()
  l1_siib_scores_gaussian <- siib_scores_gaussian_loc |> read.csv(sep=",") |> as_tibble()
    l1_siib_scores_gaussian_gapped <- siib_scores_gaussian_gapped_loc |> read.csv(sep=",") |> as_tibble()
  
  all_data <- l1_data |> 
    merge(l1_stoi_scores, by.x = c("audio", "snr"), by.y=c("filename", "snr"), all.x=TRUE) |>
     merge(l1_miknn_scores, by.x = c("audio", "snr"), by.y=c("CleanFile", "Degradation"), all.x=TRUE) |>
    merge(l1_siib_scores, by.x = c("audio", "snr"), by.y=c("filename", "snr"), all.x=TRUE) |>
    merge(l1_siib_scores_gaussian, by.x = c("audio", "snr"), by.y=c("filename", "snr"), all.x=TRUE) |>
    merge(l1_siib_scores_gaussian_gapped, by.x = c("audio", "snr"), by.y=c("filename", "snr"), all.x=TRUE) |>
    as_tibble()
  
  all_data <- rename(all_data, stoi_score=score)
  
  all_data <- replace_na(all_data, list(stoi_score=1))
  all_data <- mutate(.data=all_data, sim_wcr=autoscore/numwords, response_lc=tolower(response), target_lc=tolower(target), sim_editdist=stringsim(target_lc,response_lc))
  
}

all_data <- prep("data/l1res.csv",
                 stoi_scores_loc="data/stoi_scores.csv",
                 miknn_scores_loc="data/miknn_scores.csv",
                 siib_scores_loc="data/siib_scores.csv",
                 siib_scores_gaussian_loc="data/siib_scores_gaussian.csv",
                 siib_scores_gaussian_gapped_loc="data/siib_scores_gaussian_gapped.csv")

```

I assume a rater is "inaccurate" if they fail to score a clean file perfectly, and I discard all of their ratings.

```{r}

blacklist_wcr <- all_data |>
  select(id, snr, sim_wcr) |>
  filter(snr=="Q" & (sim_wcr < 1.0)) |>
  pull(id) |>
  unique()
  

blacklist_ed <- all_data |> 
  filter(snr=="Q" & (sim_editdist < 0.9)) |>
  select(id) |>
  unique() |>
  pull(id)

blacklist_all <- dplyr::union(blacklist_ed, blacklist_wcr)
```

Some logistic functions

```{r math-formulas}
logist_taal2010_stoi <- function(d, a, b, fac=1) {
  fac / (1 + exp(a * d + b))
}



logist_taal2010_nsec <- function( d,a,b,c, fac=1) {
  fac / (1 + (a*d + b)^c)
}
```

I define some operators in case it's useful

```{r}
`%sp%` <- function(df, spk) {
  filter(df, speaker == spk)
}

`%snr%` <- function(df, val) {
  filter(df, snr == val)
}
```

Functions for easily filtering data

```{r}
filter_data <- function(data, col, val, bl, ...) {
  
  ls = list(...)

  data <- data |> 
    subset(!(id %in% bl)) |>
    filter({{col}} %in% {{val}})
  data
}

apply_bl <- function(data, bl) {
  data <- data |> subset(!(id %in% bl))
}

noq <- function(data) {
  data |> filter(snr != 'Q')
}
```

Finally I use the function

```{r}
filtered_data <- apply_bl(
  data=all_data, 
  bl=blacklist_wcr)


```

TBD

```{r}
prep_plot <- function(data, x, y) {
  ggplot(data=data, aes(x={{x}}, y={{y}}, color = factor(snr, levels =   snr_order)))
}

prep_stoi_miknn_plot <- function(data) {
    ggplot(data=data, aes(x=stoi_score, y=MIKNNScore2x, color = factor(snr, levels =   snr_order)))
}

prep_stoi_siib_plot <- function(data) {
    ggplot(data=data, aes(x=stoi_score, y=siib_score_gaussian, color = factor(snr, levels =   snr_order)))
}
```

```{r}
p <- prep_plot(noq(filtered_data), stoi_score, MIKNNScore2x)
p + geom_point() + labs(x="STOI Score", y="MIKNN Score", color="SNR") + geom_smooth(method = "lm", se = FALSE, formula = y ~ x, color = "red")

p <- prep_plot(noq(filtered_data), stoi_score, siib_score)
p + geom_point() + labs(x="STOI Score", y="SIIB Score", color="SNR") + geom_smooth(method = "lm", se = FALSE, formula = y ~ x, color = "red")

p <- prep_plot(noq(filtered_data), stoi_score, siib_score_gaussian)
p + geom_point() + labs(x="STOI Score", y="SIIB Score (Gaussian)", color="SNR") + geom_smooth(method = "lm", se = FALSE, formula = y ~ x, color = "red")

p_siibgaus_siib <- prep_plot(noq(filtered_data), siib_score_gaussian, siib_score)
p_siibgaus_siib + geom_point() + labs(x="SIIB Score (Gaussian)", y="SIIB Score", color="SNR") + geom_smooth(method = "lm", se = FALSE, formula = y ~ x, color = "red")

p <- prep_plot(noq(filtered_data), stoi_score, siib_score_gaussian_gapped)
p + geom_point() + labs(x="STOI Score", y="SIIB Score (Gaussian)", color="SNR") + geom_smooth(method = "lm", se = FALSE, formula = y ~ x, color = "red")

p_siibgaus_siib <- prep_plot(noq(filtered_data), siib_score_gaussian_gapped, siib_score)
p_siibgaus_siib + geom_point() + labs(x="SIIB Score (Gaussian)", y="SIIB Score", color="SNR") + geom_smooth(method = "lm", se = FALSE, formula = y ~ x, color = "red")


p <- prep_plot(noq(filtered_data), siib_score_gaussian, siib_score_gaussian_gapped)
p + geom_point() + labs(x="SIIB gaus", y="SIIB Score (Gaussian) gapped", color="SNR") + geom_smooth(method = "lm", se = FALSE, formula = y ~ x, color = "red")

kendall_stoi_miknn <- cor(noq(filtered_data)$stoi_score, noq(filtered_data)$MIKNNScore2x, method = "kendall")
kendall_stoi_miknn

kendall_stoi_siib <- cor(noq(filtered_data)$stoi_score, noq(filtered_data)$siib_score, method = "kendall")
kendall_stoi_siib

kendall_stoi_siibgauss <- cor(noq(filtered_data)$stoi_score, noq(filtered_data)$siib_score_gaussian, method = "kendall")
kendall_stoi_siibgauss
```

\

```{r}
fit <- lm(data=noq(filtered_data), formula=siib_score_gaussian_gapped ~ siib_score_gaussian
          )

c<-cor(x=noq(filtered_data)$siib_score_gaussian, y=noq(filtered_data)$siib_score_gaussian_gapped, method="kendall")
summary(c)
```

```{r}
f53 <- filtered_data %sp% 53
p <- prep_plot(filtered_data, stoi_score, sim_wcr)
p + geom_point() + labs(x="STOI Score", y="Subjective Score (WCR)", color="SNR")

p <- prep_plot(filtered_data, stoi_score, sim_editdist)
p + geom_point() + labs(x="STOI Score", y="Subjective Score (WCR)", color="SNR")

p <- prep_plot(filtered_data |> noq(), siib_score, sim_wcr)
p + geom_point() + labs(x="SIIB Score", y="Subjective Score (WCR)", color="SNR")

p <- prep_plot(filtered_data |> noq(), siib_score_gaussian, sim_wcr)
p + geom_point() + labs(x="SIIB Score (Gaussian)", y="Subjective Score (WCR)", color="SNR")

p <- prep_plot(filtered_data |> noq(), MIKNNScore2x, sim_wcr)
p + geom_point() + labs(x="MIKNN Score", y="Subjective Score (WCR)", color="SNR")

#fit <- nls(sim_editdist ~ fun(stoi_score, a, b), start=list(a=-3,b=2), data=data)
#preds <- predict(fit)
#pearson_cor <- cor(data$stoi_score, data$sim_editdist, method = "pearson")
```

```{r}
all_wcrs <- all_data |> select(sim_wcr) |> unique()
all_wcrs <- all_data |> group_by(sim_wcr) |> summarise(avg_stoi_score = mean(stoi_score))

p <- ggplot(all_wcrs, aes(avg_stoi_score, sim_wcr))
p + geom_point()

all_stoi <- all_data |> group_by(stoi_score) |> summarise(avg_wcr = mean(sim_wcr))

p <- ggplot(all_stoi, aes(stoi_score, avg_wcr))
p + geom_point()

sampled_all_data <- all_data |> sample_n(500)

ggplot(sampled_all_data, aes(x=stoi_score, y=sim_wcr)) + geom_point()

all_stoi_binned <- all_data %>%
  # Create 10 bins (breaks = 10) across the full range of stoi_score
  mutate(stoi_bin = cut(stoi_score, breaks = 20, include.lowest = TRUE)) %>%
  # Group by the bin instead of the raw stoi_score
  group_by(stoi_bin) %>%
  summarise(avg_wcr = mean(sim_wcr, na.rm = TRUE))

pasb <- ggplot(all_stoi_binned, aes(x = stoi_bin, y = avg_wcr))

pasb +  geom_point() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels if needed


all_stoi_binned_filt <- filtered_data %>%
  # Create 10 bins (breaks = 10) across the full range of stoi_score
  mutate(stoi_bin = cut(stoi_score, breaks = 20, include.lowest = TRUE)) %>%
  # Group by the bin instead of the raw stoi_score
  group_by(stoi_bin) %>%
  summarise(avg_wcr = mean(sim_wcr, na.rm = TRUE))

pasbf <- ggplot(all_stoi_binned_filt, aes(x = stoi_bin, y = avg_wcr))


ggplot() +
  geom_point(
    data = all_stoi_binned, 
    aes(x = stoi_bin, y = avg_wcr),
    color = "blue"        # for example
  ) +
  geom_point(
    data = all_stoi_binned_filt, 
    aes(x = stoi_bin, y = avg_wcr),
    color = "red"
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))



```

### Experiment 1

```{r exp-1}
# 1- sample 5% for each different SNR, preferably with same listeners (cluster?) 

## Take 5% of unique IDs (I have confirmed all ID's have been exposed to all SNRs)
data_lis_slice <- all_data |> group_by(id) |> slice_sample(prop=0.05)

## Take the minimum among SNRs
mc <- data_lis_slice |> group_by(snr) |> count(snr) |> pull(n) |> min()

## Prune data until there are equal number of SNRs 
data_lis_slice <- data_lis_slice |> group_by(snr) |> slice_sample(n = mc) |> ungroup()

dlss <- data_lis_slice |> noq() |> group_by(snr) |> summarise(avg_stoi = mean(stoi_score, na.rm=TRUE), avg_wcr = mean(sim_wcr, na.rm=TRUE)) |> ungroup() |> mutate(snr = factor(snr,snr_order)) |>   mutate(
    snr_num = as.numeric(gsub("^n", "-", as.character(snr)))
  )

dlss |> ggplot(aes(x=snr_num, y=avg_wcr)) + geom_point()
dlss |> ggplot(aes(x=snr_num, y=avg_stoi)) + geom_point()
dlss |> ggplot(aes(x=avg_stoi, y=avg_wcr)) + geom_point()

# 2- Fit curve

fit_stoi_wcr <- nls(
  formula = avg_wcr ~ logist_taal2010_stoi(avg_stoi, a, b),
  data = dlss,
  start = list(a=0.5, b=0)
)

fit_snr_stoi <- nls(
  formula = avg_stoi ~ logist_taal2010_stoi(snr_num, a, b),
  data = dlss,
  start = list(a=0.5, b=0)
)
# summary(fit_stoi_wcr)
summary(fit_snr_stoi)
# Generate a sequence of STOI values over the range:
stoi_grid <- tibble(
  #avg_stoi = seq(min(dlss$avg_stoi), max(dlss$avg_stoi), length.out = 200)
  avg_stoi = seq(0,1,length.out=200)
)



# Predict over that grid
stoi_grid <- stoi_grid %>%
  mutate(avg_wcr_pred = predict(fit_stoi_wcr, newdata = .))

ggplot(dlss, aes(x=avg_stoi, y=avg_wcr)) +
  geom_point() +
  geom_line(data=stoi_grid, aes(x=avg_stoi, y=avg_wcr_pred), color="green", linewidth=1)


# 3- Obtain listener IDs

# 4- Create samples for each SNR with different listener IDs

# 5- Test curve
```

\

```{r}

p <- prep_plot(f53, stoi_score, sim_wcr)
p + geom_point() + labs(x="STOI Score", y="Subjective Score (WCR)", color="SNR")

p <- prep_plot(f53, stoi_score, sim_editdist)
p + geom_point() + labs(x="STOI Score", y="Subjective Score (stringdist)", color="SNR")

p <- prep_plot(f53 |> noq(), siib_score, sim_wcr)
p + geom_point() + labs(x="SIIB Score", y="Subjective Score (WCR)", color="SNR")

p <- prep_plot(f53 |> noq(), siib_score_gaussian, sim_wcr)
p + geom_point() + labs(x="SIIB Score (Gaussian)", y="Subjective Score (WCR)", color="SNR")

p <- prep_plot(f53 |> noq(), MIKNNScore2x, sim_wcr)
p + geom_point() + labs(x="MIKNN Score", y="Subjective Score (WCR)", color="SNR")

#fit <- nls(sim_editdist ~ fun(stoi_score, a, b), start=list(a=-3,b=2), data=data)
#preds <- predict(fit)
#pearson_cor <- cor(data$stoi_score, data$sim_editdist, method = "pearson")
```

Plots per SNR

```{r}

for (snr in snr_order) {
  p <- prep_plot(filtered_data %snr% snr, stoi_score, sim_wcr)
  print(p + geom_point() + labs(x="STOI Score", y="Subjective Score (WCR)", color="SNR"))
}



#fit <- nls(sim_editdist ~ fun(stoi_score, a, b), start=list(a=-3,b=2), data=data)
#preds <- predict(fit)
#pearson_cor <- cor(data$stoi_score, data$sim_editdist, method = "pearson")
```

Experiment: discard last word for SNR, removes clipping effects

```{r}
data_no_lw <- all_data
data_no_lw$target <- all_data["target"] |> sapply(function(x){sub("\\s+\\S+$", "", x)})
data_no_lw$response <- all_data["response"] |> sapply(function(x){sub("\\s+\\S+$", "", x)})

class(data_no_lw)

data_no_lw <- mutate(.data=data_no_lw, response_lc=tolower(response), target_lc=tolower(target), sim_editdist=stringsim(target_lc,response_lc))


f53 <- data_no_lw %sp% 53
p <- prep_plot(data_no_lw, stoi_score, sim_wcr)
p + geom_point() + labs(x="STOI Score", y="Subjective Score (WCR)", color="SNR")

p <- prep_plot(data_no_lw, stoi_score, sim_editdist)
p + geom_point() + labs(x="STOI Score", y="Subjective Score (WCR)", color="SNR")

p <- prep_plot(data_no_lw |> noq(), siib_score, sim_wcr)
p + geom_point() + labs(x="SIIB Score", y="Subjective Score (WCR)", color="SNR")

p <- prep_plot(data_no_lw |> noq(), siib_score_gaussian, sim_wcr)
p + geom_point() + labs(x="SIIB Score (Gaussian)", y="Subjective Score (WCR)", color="SNR")

p <- prep_plot(data_no_lw |> noq(), MIKNNScore2x, sim_wcr)
p + geom_point() + labs(x="MIKNN Score", y="Subjective Score (WCR)", color="SNR")
```

```{r}

create_bins <- function(data, x) {
  binned_data <- data |> noq() |> mutate(
    bin = case_when(
      {{x}} == 0 ~ "0",
      {{x}} <= 0.2 ~ "0 < 0.2",
      {{x}} <= 0.4 ~ "0.2 - 0.4",
      {{x}} <= 0.6 ~ "0.4 - 0.6",
      {{x}} <= 0.8 ~ "0.6 - 0.8",
      {{x}} < 1 ~ "0.8 < 1",
      TRUE ~ "1"
    )
)
}


filtered_data |> create_bins(sim_wcr) |> ggplot(aes(x = bin)) + geom_histogram(stat = "count")

p <- filtered_data |> noq() |> ggplot(aes(x=sim_editdist))
p + geom_histogram(bins=5) 
```
